ðŸ”· Database and Table Navigation
âž¤ SHOW DATABASES;                 -- Show all databases
âž¤ USE database_name;               -- Use a specific database
âž¤ SHOW TABLES;                     -- Show all tables in the selected database

ðŸ”· Reading Data from Tables
ðŸŒŸ  Select All Columns
âž¤ SELECT * FROM emplyoee;

Example Output:
| EID | EName | Salary | Cities |
| --- | ----- | ------ | ------ |
| 1   | Ankur | 10000  | BGLR   |
| 2   | Ram   | 20000  | BGLR   |
| 3   | Smith | 5000   | MBI    |
| 4   | Carlo | 2000   | MBI    |
| 5   | Manas | 1000   | LKO    |
| 6   | Ramu  | 15000  | LKO    |

ðŸ”· Reading Specific Columns
ðŸŒŸ Sometimes you may only need to retrieve certain columns instead of all the data. For example, if you only want to see the EID and EName columns for every employee, you can write:
âž¤ SELECT EID, EName FROM emplyoee;

ðŸ”· Filtering Records Using WHERE
ðŸŒŸ If you want to fetch the name of the employee whose salary is exactly 10000, you can apply a filter using the WHERE clause as follows:
âž¤ SELECT EName FROM emplyoee WHERE Salary = 10000;

ðŸŒŸ If you wish to retrieve the names of employees whose salary is greater than or equal to 10000, the query will be:
âž¤ SELECT EName FROM emplyoee WHERE Salary >= 10000;

ðŸŒŸ If you want to get the names of employees whose salary is either 5000 or 2000, you can use the IN operator:
âž¤ SELECT EName FROM emplyoee WHERE Salary IN (5000, 2000);

ðŸŒŸ If your goal is to get the employee IDs for those whose names are either Smith or Carlo, you can write:
âž¤ SELECT EID FROM emplyoee WHERE EName IN ('Smith', 'Carlo');

ðŸ”· Using HAVING for Filtering
ðŸŒŸ The HAVING clause is generally used to filter aggregated data after a GROUP BY operation, but it can also be applied without grouping. For example, if you want to display all employees whose salary is exactly 10000 using HAVING, you can write:
âž¤ SELECT * FROM emplyoee HAVING Salary = 10000;

ðŸŒŸ Similarly, if you need the employee ID for the employee named "Vikram" using HAVING, the query will be:
âž¤ SELECT EID FROM emplyoee HAVING EName = 'Vikram';

ðŸ”· Sorting Data Using ORDER BY
ðŸŒŸ If you want to see employee IDs sorted in descending order, you can use:
âž¤ SELECT EID FROM emplyoee ORDER BY EID DESC;

ðŸŒŸ To get employee names sorted in descending order alphabetically:
âž¤ SELECT EName FROM emplyoee ORDER BY EName DESC;

ðŸŒŸ And if you need employee IDs sorted in ascending order:
âž¤ SELECT EID FROM emplyoee ORDER BY EID ASC;

ðŸ”· Using Aggregate Functions
ðŸŒŸ If you want to find the maximum salary among all employees, you can use the MAX() function:
âž¤ SELECT MAX(Salary) FROM emplyoee;

ðŸŒŸ To find the second-highest salary, you can write:
âž¤ SELECT MAX(Salary) 
FROM emplyoee 
WHERE Salary < (SELECT MAX(Salary) FROM emplyoee);

ðŸŒŸ To calculate the average salary of all employees:
âž¤ SELECT AVG(Salary) FROM emplyoee;

ðŸŒŸ If you want to find the total sum of all salaries:
âž¤ SELECT SUM(Salary) FROM emplyoee;

ðŸŒŸ To count the total number of employees:
âž¤ SELECT COUNT(EID) FROM emplyoee;

ðŸ”· Grouping Records with GROUP BY
ðŸŒŸ If you want to count the number of employees in each city, you can group by the Cities column:
âž¤ SELECT Cities, COUNT(EID) 
FROM emplyoee 
GROUP BY Cities;

ðŸŒŸ If you want to count employees city-wise and then sort them in ascending order of count:
âž¤ SELECT Cities, COUNT(EID) AS EmpCount
FROM emplyoee
GROUP BY Cities
ORDER BY EmpCount ASC;

ðŸŒŸ If you want to count the number of cities and sort them alphabetically:
âž¤ SELECT Cities, COUNT(Cities) 
FROM emplyoee
GROUP BY Cities
ORDER BY Cities ASC;

ðŸŒŸ If you want to group employees by city but only for those in Bangalore (BGLR), you can filter with WHERE first:
âž¤ SELECT COUNT(Cities) 
FROM emplyoee
WHERE Cities = 'BGLR'
GROUP BY Cities;

ðŸ”· Changing Case of Text
ðŸŒŸ To display all employee names in uppercase, you can use the UCASE() function:
âž¤ SELECT UCASE(EName) FROM emplyoee;

ðŸŒŸ To display them in lowercase, use:
âž¤ SELECT LCASE(EName) FROM emplyoee;
