Step 1: Install Tomcat
-> Tomcat is a application server
-> Application server is responsible to run Servlet, JSP etc

a. Go to Official Website of Tomcat: https://tomcat.apache.org/download-90.cgi
b. Click on tomcat 10 link
c. Under Binary Distribution>>Download Zip file: https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.40/bin/apache-tomcat-10.1.40.zip
d. Copy the download the ZIP file and paste that into newly created folder tomcat-10 (G: or D:)
e. Open eclipse and go to server tab>>Click on the link no servers are available>>Go to Apache >> Click on tomcat 10.1>.Click on next button>>Browse and select tomcat path till you see bin(Exclude bin folder)
Example: G:\tomcat - 10\apache-tomcat-10.1.40
f. Under JRE Select 21
g. Click on finish

Steps to Delete Tomcat
#######################
Step 1: Stop tomcat from server tab
Step 2: Right click on tomcat entry in server tab and select delete option
Step 3: After Deleting again click on No Servers are available link present inside server tab
Step 4: Go to server tab>>Click on the link no servers are available>>Go to Apache >> Click on tomcat 10.1
Step 5: Click on Configure run time environments
Step 6: Select tomcat entry and click on remove button
Step 7: Click on apply and close
Step 8: Click on cancel button

Create First HTML page
##############################
Step 1 : Create Dynamic web project
Go to File>>New >> Other>> type dynamic web project>>Click on next button
Step 2: Give your project a name: web_app_1
Step 3: Select dynamic web module version(5 or 6 or 4) depending on your laptop OS + Hardware
Step 4: Click on finish
Step 5: go to web_app_1>>src>>webapp or webcontent>>create index.html page>>Click on finish

‚úÖ What are Servlets?
A Servlet is a server-side Java class that handles HTTP requests and generates dynamic responses, usually in the form of HTML.

Servlets are Java programs (classes) that run on a Java-enabled web server (like Tomcat) and act as the middle layer between client requests (like HTML forms, JSPs) and backend processing (like databases or business logic).

‚úÖCode Example-1
 Make html page interact with backend java code
index.html
----------
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>
		</form>
	</body>
</html>

üü© 1. index.html ‚Äî The Frontend (Form UI)
This HTML form:
‚û§ Sends form data to the server.
‚û§ Uses POST method (meaning data is sent in the body, not URL).
‚û§ Triggers the RegistrationServlet because of the action="saveReg".

üß† How does it map?
The form‚Äôs action="saveReg" ‚Üí Maps to @WebServlet("/saveReg") in your Java servlet.

üìå Missing Names in Input Fields
Your inputs are currently like:

<input type="text" />
‚ùå This will not send any data because the inputs are missing name attributes.

‚úÖ Fix: Add name attributes
<input type="text" name="name" />
<input type="text" name="emailId" />
<input type="text" name="mobile" />

‚úÖ@WebServlet("/saveReg") Annotation:
This annotation tells the servlet container (like Tomcat) to map this servlet to the /saveReg path, which is the same as the form‚Äôs action.

üî∏ Servlet Class Lifecycle
‚û§ It extends HttpServlet, which lets it handle doGet() and doPost() requests.
‚û§ It gets triggered when a client sends a request.

RegistrationServlet.java
-------------------------
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public RegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

Class.forName(...) is a Java reflection method that:
‚û§ Loads the class into memory.
‚û§ Executes any static blocks inside that class.
‚û§ "com.mysql.cj.jdbc.Driver" is the fully qualified class name of the MySQL JDBC driver.

‚û§ This line is used in JDBC (Java Database Connectivity) to load the database driver class dynamically at runtime.

üîπ doGet() Method
‚û§ Runs when the form or browser sends a GET request to /saveReg
‚û§ Currently just prints "get" to the server console

üîπ doPost() Method
‚û§ Runs when the form submits via method="post"
‚û§ Currently just prints "post" to the console

‚û§ Later, you can extract data like:
String name = request.getParameter("name");

‚úÖ Interaction Flow Summary
| Step | What Happens                                                     |
| ---- | ---------------------------------------------------------------- |
| 1.   | User fills form on `index.html`                                  |
| 2.   | User clicks **Submit**, browser sends POST request to `/saveReg` |
| 3.   | Tomcat checks for a matching servlet path                        |
| 4.   | It finds `@WebServlet("/saveReg")` and runs the servlet          |
| 5.   | Because it's a POST, `doPost()` is called                        |
| 6.   | `System.out.println("post");` logs in server console             |

‚úÖ Final Enhancement Idea
To receive the data and send a response back:

protected void doPost(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
	String name = request.getParameter("name");
	String email = request.getParameter("emailId");
	String mobile = request.getParameter("mobile");

	System.out.println("Name: " + name);
	System.out.println("Email: " + email);
	System.out.println("Mobile: " + mobile);

	response.setContentType("text/html");
	response.getWriter().println("<h2>Thank you, " + name + ". Registration successful!</h2>");
}

Example 2: Servlet should read form data
-----------------------------------------
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" name="name"/></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>
		</form>
	</body>	
</html>

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public RegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String name = request.getParameter("name");
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");
		System.out.println(name);
		System.out.println(email);
		System.out.println(mobile);
	}

}
When submitted, browser sends form data as key-value pairs:
name=Ankur&emailId=ankur@example.com&mobile=1234567890

üîß doPost() Method
üîç What happens here:
request.getParameter("name") extracts the value of the <input name="name" />.
Similarly for emailId and mobile.

‚úÖ Example Output on Console (Server side):
Ankur
ankur@example.com
1234567890

Example 3: Save Data into database using servlets after reading form data

index.html
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" name="name"/></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>	
		</form>		
	</body>
</html>

RegistrationServlet.java
üîê Use PreparedStatement instead of Statement to prevent SQL injection.
üõ°Ô∏è Return response message to the client (not just print in server logs).

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public RegistrationServlet() {
		super();
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Read form data
		String name = request.getParameter("name");
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");

		// Set response type
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();

		try {
			// Load JDBC driver
			Class.forName("com.mysql.cj.jdbc.Driver");

			// Connect to DB
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb", "root", "test");

			// Use PreparedStatement
			String sql = "INSERT INTO student (name, email, mobile) VALUES (?, ?, ?)";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, name);
			ps.setString(2, email);
			ps.setString(3, mobile);

			// Execute and confirm insertion
			int rows = ps.executeUpdate();

			if (rows > 0) {
				out.println("<h2>Registration Successful!</h2>");
			} else {
				out.println("<h2>Registration Failed. Please try again.</h2>");
			}

			// Close resources
			ps.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
			out.println("<h2>Error occurred: " + e.getMessage() + "</h2>");
		}
	}
}

Example 4 - Delete Data from Database
########################################
delete_registration.html

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Delete Registration</title>
	</head>
	<body>
		<h2>Delete Registration Page</h2>
		<form	action="deleteReg" method="post">
			<table>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="delete" /></td>
				</tr>
			</table>
		</form>
	</body>	
</html>

DeleteRegistration.java

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@WebServlet("/deleteReg") //Submits the form to /deleteReg (mapped to the servlet).
public class DeleteRegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public DeleteRegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String email = request.getParameter("emailId");
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();

			//‚úÖCreates a SQL DELETE query that deletes the student whose email matches the input.
			stmnt.executeUpdate("Delete From student where email='"+email+"'");
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

üî¥ Security Note: This is vulnerable to SQL Injection. It's better to use PreparedStatement instead of createStatement.

‚ö†Ô∏è Recommended Improvements (for Production)

‚úÖ Use PreparedStatement to prevent SQL Injection:
PreparedStatement ps = con.prepareStatement("DELETE FROM student WHERE email = ?");
ps.setString(1, email);
ps.executeUpdate();

‚úÖ Add response output or redirect after deletion:
response.getWriter().println("Record deleted successfully.");

‚úÖ Add input validation: Check if email is empty or null.

Example 5- Update a student‚Äôs mobile number using their email ID as the identifier.

update_registration.html

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>update Registration</title>
	</head>
	<body>
		<h2>Update Registration Page</h2>
		<form	action="updateReg" method="post">
			<table>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="update" /></td>
				</tr>
			</table>
		</form>
	</body>		
</html>

‚û§ This sends the form data (email + new mobile number) to the updateReg servlet via a POST request.
1. emailId: Acts as the unique identifier (like a primary key).
2. mobile: New mobile number that will replace the old one in the database.

UpdateRegistrationServlet.java
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@WebServlet("/updateReg") //Maps the servlet to the /updateReg endpoint.
public class UpdateRegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public UpdateRegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//Retrieves the email and new mobile number submitted via the HTML form.
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");
		try {
			//Database Logic
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();

			//‚úÖ Updates the mobile number for the student whose email matches.
			stmnt.executeUpdate("update student set mobile='"+mobile+"' where email='"+email+"'");
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
‚úÖ Output
‚û§ If a student with the given email exists ‚Üí their mobile number will be updated.
‚û§ If not ‚Üí the query will affect 0 rows silently.

üîê Important Notes (for Real Projects)
üî∏ Use PreparedStatement to Prevent SQL Injection
Replace:
Statement stmnt = con.createStatement();
stmnt.executeUpdate("UPDATE student SET mobile='"+mobile+"' WHERE email='"+email+"'");

With:
PreparedStatement ps = con.prepareStatement("UPDATE student SET mobile=? WHERE email=?");
ps.setString(1, mobile);
ps.setString(2, email);
ps.executeUpdate();

üî∏ Validate Inputs
Check if email or mobile is null or empty before executing the update.

üî∏ Add Response
You may send a confirmation back:
response.getWriter().println("Mobile number updated successfully for: " + email);

Example 6:Running directly servlet
When we run a servlet , get method of servlet will get executed

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}

}
Output: Get


Example 9:Write data from servlet to html
-----------------------------------------

Note: 
-> use repsonse.getWriter() for writing data to html
PrintWriter out = repsonse.getWriter(); //------> Will give out reference using which we can write content to html

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		out.println("hello");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

üîπ What's happening?

1. Servlet Mapping:
The annotation @WebServlet("/readReg") means this servlet is mapped to the URL path /readReg.

2. Request Type:
‚û§ When you type the URL directly into the browser (like http://localhost:8080/yourApp/readReg) and press Enter, the browser sends a GET request.
‚û§ This triggers the doGet() method.

3. Inside doGet():
System.out.println("Get");

‚û§ This prints "Get" to your server console (not the browser).
‚û§ So if you're checking the terminal or server logs (e.g., in Eclipse or IntelliJ console), you‚Äôll see: Get

üß™ How to test doPost()?
‚û§ To trigger the doPost() method, you must send a POST request, like through an HTML form:

<form action="readReg" method="post">
    <input type="submit" value="Submit via POST"/>
</form>

‚û§ When this form is submitted, the browser sends a POST request to /readReg, and you'll get: post

Note: If you want the output to appear in the browser (not just console), you need to use:
response.getWriter().println("Hello from servlet!");

Example 7: Read data from database and display that as a table in html

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		response.setContentType("text/html");
		out.println("<table border=1>");
		out.println("<tr>");
		out.println("<th>");
		out.println("Name");
		out.println("</th>");
		out.println("<th>");
		out.println("Email Id");
		out.println("</th>");
		out.println("<th>");
		out.println("Mobile");
		out.println("</th>");
		out.println("</tr>");
		
		//JDBC Code to read data from database
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();
			ResultSet result = stmnt.executeQuery("Select * from student");
			
			while(result.next()) {
				out.println("<tr>");
				out.println("<td>");
				out.println(result.getString(1));
				out.println("</td>");
				out.println("<td>");
				out.println(result.getString(2));
				out.println("</td>");
				out.println("<td>");
				out.println(result.getString(3));
				out.println("</td>");
				out.println("</tr>");
			}
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		out.println("</table>");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

‚úÖ Expected HTML Output in Browser:
You will see a table like:
+------+------------------+--------+
| Name | Email Id         | Mobile |
+------+------------------+--------+
| John | john@mail.com    | 123456 |
| Amy  | amy@email.com    | 789012 |
+------+------------------+--------+

‚úÖ Close resources:
Add finally block to safely close ResultSet, Statement, and Connection.

finally {
    try { result.close(); } catch(Exception e) {}
    try { stmnt.close(); } catch(Exception e) {}
    try { con.close(); } catch(Exception e) {}
}

‚úÖ JSP - JavaServer 

‚û§ JSP stands for JavaServer Pages.
‚û§ It is a server-side technology used to create dynamic web content using Java.
‚û§ It allows embedding Java code inside HTML pages, making it easier for developers to write dynamic web pages.

üîπ Key Points:
‚û§ JSP is an extension of Servlet technology.
‚û§ JSP files are saved with .jsp extension.
‚û§ During execution, JSP is converted into a Servlet by the server internally.

üîπ Why Use JSP?
‚û§ Mixes HTML and Java logic, unlike Servlets which are purely Java.
‚û§ Easy for frontend + backend integration.
‚û§ Reduces the complexity of HTML generation in Servlets (no need for out.println() for every tag).

üîπ How JSP Works (Lifecycle):
‚û§ JSP File ‚Üí Servlet: JSP is converted into a Servlet.
‚û§ Compilation: The Servlet is compiled into .class.
‚û§ Execution: JVM executes the class and sends output as HTML to the client.

üß† JSP Tags
‚úÖ scriptlet tag
A scriptlet in JSP allows us to embed raw Java code directly inside HTML.

üîπ Characteristics:
‚û§ The code inside <% ... %> is placed inside the _jspService() method when the JSP is converted to a servlet.
‚û§ You can declare variables, loops, conditionals, method calls, etc.
‚û§ Cannot declare methods (use <%! ... %> for that).
‚û§ Has access to implicit objects.

Example 1: registration_page.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%
		for(int i=0;i<5;i++){
			System.out.println(i);
		}
	%>
</body>
</html>

‚û§ ‚ö†Ô∏è System.out.println(i); will not print in the browser, it prints to the server console.
‚û§ ‚úÖ Use out.println(...) to display on the browser.

üîπ Best Practice:
	<%
		for(int i=0;i<5;i++){
			out.println(i);
		}
	%>

‚úÖ What is an Implicit Object in JSP?
‚û§ Implicit Objects are predefined objects that are automatically available in every JSP page without needing to declare or create them.

‚û§ They are provided by the JSP container (like Apache Tomcat), and they allow you to access key parts of the HTTP request/response lifecycle, like session data, output to browser, application context, etc.

üîπ Available Implicit Objects in Scriptlet:
| Object        | Description                               |
| ------------- | ----------------------------------------- |
| `out`         | Used to send output to client (browser)   |
| `request`     | Represents HTTP request                   |
| `response`    | Represents HTTP response                  |
| `session`     | Session between client and server         |
| `application` | ServletContext shared across app          |
| `config`      | ServletConfig object for current page     |
| `pageContext` | Provides access to all JSP scoped objects |
| `exception`   | Available in error pages only             |
| `page`        | This JSP page (like `this`)               |

üö´ Why Can't We Use:
1. Access specifier inside the scriptlet tag.
2. static / non static variables
3. create methods inside scriptlet tag

‚úÖExample:
    <%
		public int x; // ‚ùå Error
		public void test(){ // ‚ùå Error
		}
	%>

	The JSP engine translates your JSP page into a Servlet class, like this:

	public class SomeJspServlet extends HttpServlet {
    public void _jspService(...) {
        // your scriptlet code goes here
        public int x;  // ‚ùå Not allowed inside method
        public void test() {}  // ‚ùå Can't define a method inside another method
    }
}

üß† In Java, you can't declare access modifiers (public, private, etc.) or define methods inside other methods. That‚Äôs why the above gives a compile-time error.

Note: Only local variable can be created inside scriptlet
Because scriptlet code is inserted inside a method, not at the class level.
‚úÖExample:
	<%
		int x=10;//------>Local Variable
		out.println(x);
		
	%>

Note: We cannot write html code inside scriptlet tag

‚úÖ Declaration Tag in JSP
Syntax: <%! ... %>

Used to declare:
1. Variables (static/non-static)
2. Methods
3. Anything you would normally write at class level in Java

üîç Key Rules for Declaration Tag
| Feature                     | Allowed in Declaration Tag? |
| --------------------------- | --------------------------- |
| `public static` or `public` | ‚úÖ Yes                       |
| Implicit objects like `out` | ‚ùå No                        |
| HTML code                   | ‚ùå No                        |
| Java methods                | ‚úÖ Yes                       |
| Class-level variables       | ‚úÖ Yes                       |


Example 1:
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%! 
    public static int y = 100;       // static variable
    public int x = 10;               // instance variable
    public String test() {           // method
        return "hello";
    }
%>

<%
    out.println(y);        // ‚úÖ prints 100
    out.println(x);        // ‚úÖ prints 10
    out.println(test());   // ‚úÖ prints hello
%>

</body>
</html>

‚úîÔ∏è Behind the Scenes (What JSP Compiles To):

public class YourJspPage extends HttpServlet {

    public static int y = 100;
    public int x = 10;

    public String test() {
        return "hello";
    }

    public void _jspService(HttpServletRequest request, HttpServletResponse response) {
        JspWriter out = response.getWriter();
        out.println(y);
        out.println(x);       // accesses instance variable
        out.println(test());  // calls instance method
    }
}

üß† Important Notes
‚û§ out, request, response, etc. are not available in <%! %> ‚Äî they exist only in <% %> (scriptlet) or inside the _jspService() method.
‚û§ You can access the declared variables/methods from scriptlet or expression tags, like in your example.
‚û§ HTML is NOT allowed inside <%! %> ‚Äî it will throw an error because it's compiled as Java code.


‚úÖ Expression Tag in JSP
üîπ Syntax: <%= expression %>

üîπ Purpose:
‚û§ It evaluates a Java expression and prints the result to the HTML response (webpage).
‚û§ Here we can write only one statement

‚ùó Common Mistakes to Avoid
‚û§ Ending the expression with a semicolon (;) ‚Üí ‚ùå will cause a syntax error.
<%= x; %>   // ‚ùå Wrong
<%= x %>    // ‚úÖ Correct

‚û§ Using statements like loops/conditions ‚Üí ‚ùå not allowed.
<%= for(int i=0; i<5; i++) {} %> // ‚ùå Wrong

üîç Key Features
| Feature                      | Explanation                                                                          |
| ---------------------------- | ------------------------------------------------------------------------------------ |
| No LHS (Left-hand side)  | You're not assigning ‚Äî you're just evaluating and printing directly to the response. |
| Output goes to browser   | The result is added to the `HttpServletResponse` via `JspWriter out`.                |
| No semicolon          | Only expressions are allowed, not full Java statements.                              |
| Implicit objects allowed | Yes, like `out`, `request`, `response`, etc.                                         |
| Auto converted           | It's internally converted into `out.print(...)`.                                     |

üß† Why No LHS?
‚û§ This tag is only for output.
‚û§ Think of it like System.out.print() ‚Äî but the destination is the browser (via the out object).
‚û§ You're not assigning values ‚Äî you're saying:
üëâ "Evaluate this expression, and show it to the user."

Example:
--------
	<%!
		public static int y=100;
		public int x=10;
		public String test(){
			return "hello";
		}
		
	%>
	
	<%=x %>
	<%=y %>
	<%=test() %>

	Output in Browser:
	10
	100
	hello

üîß What JSP Converts This To (Internally):
out.print(x);        // instance variable
out.print(y);        // static variable
out.print(test());   // method call

üß† Directive tag
Syntax: <%@ directive attribute="value" %>

üîπ Purpose:
The directive tag is used to give global-level instructions to the JSP engine before the actual content is processed.

üî∏ Types of Directive Tags
| Type      | Purpose                                                               |
| --------- | --------------------------------------------------------------------- |
| `page`    | Set page-level instructions (language, import, buffer, session, etc.) |
| `include` | Include contents of another file at compile-time                  |
| `taglib`  | Used when working with custom tag libraries (e.g., JSTL)              |

Example 1:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Date" %>
<%@ page import="java.util.ArrayList" %> //class import
<%@ include file="test1.txt" %> //file import
<%@ taglib prefix="prefixName" uri="taglibURI" %> //import custom tags or JSTL

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%=new Date() %>
	<% 
	ArrayList<Integer> arr = new ArrayList();
	%>

</body>
</html>


