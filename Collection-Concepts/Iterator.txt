ðŸ”„ Iterators in Java
What is an Iterator?
An Iterator is an object that allows you to traverse a collection (like ArrayList, LinkedList, HashSet, etc.) one element at a time without exposing the underlying structure.

Ways to Iterate over a Collection

1. Using Iterator Interface
Iterator<String> itr = arr.iterator();
while (itr.hasNext()) {
    String str = itr.next(); // get next element
    System.out.println(str);
}

Key Methods:
âž¤ hasNext() â†’ returns true if more elements are available.
âž¤ next() â†’ returns the next element in the iteration.
âž¤ remove() â†’ removes the current element (optional).

2. Enhanced For-Each Loop
for (String str : arr) {
    System.out.println(str);
}

âž¤ Easier syntax.
âž¤ Internally uses an Iterator.

3. Java 8+ forEach() Method
arr.forEach(System.out::println);

âž¤ Uses lambda expressions or method references.
âž¤ Best for functional-style programming.

4. ListIterator (for Lists only)
ListIterator<String> listItr = arr.listIterator();
while (listItr.hasNext()) {
    System.out.println(listItr.next());
}

âž¤ Can iterate both forward and backward.
âž¤ Can modify elements during iteration.

âš¡ Performance of ArrayList
| Operation                        | Time Complexity  | Notes                                      |
| -------------------------------- | ---------------- | ------------------------------------------ |
| Access by index (`get`)      | O(1)           | Very fast (direct array access).           |
| Add at end (`add(E e)`)      | Amortized O(1) | May trigger array resize occasionally.     |
| Add at index                 | O(n)           | Elements after the index are shifted.      |
| Remove at index              | O(n)           | Elements after the index are shifted left. |
| Search by value (`contains`) | O(n)           | Must scan through the list.                |
