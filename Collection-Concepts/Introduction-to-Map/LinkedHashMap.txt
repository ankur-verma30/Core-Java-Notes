Map (Interface)
   â†‘
SequencedMap (Interface) 
   â†‘
AbstractMap (Class)
   â†‘
HashMap (Class)
   â†‘
LinkedHashMap (Class)

2. Features
ðŸ”„Maintains Order
1. Default: Insertion order (order in which keys are inserted).
2. Can be set to access order (order based on most recently accessed) by using a special constructor.

ðŸ”„Duplicates
1. Keys â†’ Not allowed (only one null key).
2. Values â†’ Allowed (can have multiple null values).

ðŸ”„Performance
Time Complexity:
1. put() â†’ O(1)
2. get() â†’ O(1)
3. remove() â†’ O(1)

ðŸ”„Underlying Data Structure
Hash Table + Doubly Linked List.

ðŸ”„Load Factor
Default: 0.75

ðŸ”„When to use?
When you want fast lookups (HashMap) + predictable iteration order.

3. Constructors
LinkedHashMap<K, V> lhm = new LinkedHashMap<>();
LinkedHashMap<K, V> lhm = new LinkedHashMap<>(initialCapacity);
LinkedHashMap<K, V> lhm = new LinkedHashMap<>(initialCapacity, loadFactor);
LinkedHashMap<K, V> lhm = new LinkedHashMap<>(initialCapacity, loadFactor, accessOrder);

accessOrder = false â†’ insertion order (default).
accessOrder = true â†’ access order (useful for LRU Cache).

4. Internal Working
âž¤ Same as HashMap for hashing.

âž¤ Additionally, each entry stores:
1. before â†’ link to previous entry
2. after â†’ link to next entry

âž¤ Insertion order: The linked list preserves the order in which keys are inserted.
âž¤ Access order: If accessOrder is true, whenever you call get() or put(), the accessed entry is moved to the end.

âœ…Example 1 â€“ Insertion Order
import java.util.LinkedHashMap;
import java.util.Map;

public class LinkedHashMapExample1 {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> lhm = new LinkedHashMap<>();
        lhm.put("Apple", 50);
        lhm.put("Banana", 20);
        lhm.put("Mango", 70);
        lhm.put("Banana", 25); // Updates value for Banana

        System.out.println("LinkedHashMap (Insertion Order):");
        for (Map.Entry<String, Integer> entry : lhm.entrySet()) {
            System.out.println(entry.getKey() + " â†’ " + entry.getValue());
        }
    }
}

Output
LinkedHashMap (Insertion Order):
Apple â†’ 50
Banana â†’ 25
Mango â†’ 70

âœ…Example 2 â€“ Access Order
import java.util.LinkedHashMap;
import java.util.Map;

public class LinkedHashMapExample2 {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> lhm = new LinkedHashMap<>(4, 0.75f, true);

        lhm.put("A", 1);
        lhm.put("B", 2);
        lhm.put("C", 3);
        lhm.put("D", 4);

        // Accessing keys
        lhm.get("B");
        lhm.get("A");

        System.out.println("LinkedHashMap (Access Order):");
        for (Map.Entry<String, Integer> entry : lhm.entrySet()) {
            System.out.println(entry.getKey() + " â†’ " + entry.getValue());
        }
    }
}

Output
LinkedHashMap (Access Order):
C â†’ 3
D â†’ 4
B â†’ 2
A â†’ 1

7. Removing Elements
lhm.remove("Apple");

8. LRU Cache Example using LinkedHashMap
import java.util.LinkedHashMap;
import java.util.Map;

class LRUCache<K, V> extends LinkedHashMap<K, V> {
    private final int capacity;

    public LRUCache(int capacity) {
        super(capacity, 0.75f, true); // true â†’ access order
        this.capacity = capacity;
    }

    @Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size() > capacity; // Remove oldest entry when capacity exceeded
    }
}

public class LRUExample {
    public static void main(String[] args) {
        LRUCache<Integer, String> cache = new LRUCache<>(3);

        cache.put(1, "A");
        cache.put(2, "B");
        cache.put(3, "C");
        cache.get(1); // Access 1
        cache.put(4, "D"); // Removes key 2 (least recently used)

        System.out.println(cache);
    }
}

Output
{3=C, 1=A, 4=D}

9. Key Points
âž¤ Maintains order unlike HashMap.
âž¤ Slightly slower than HashMap because of linked list maintenance.
âž¤ Can be used for LRU cache.
âž¤ Only one null key allowed.
âž¤ Multiple null values allowed.