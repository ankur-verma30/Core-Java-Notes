ArrayList<E>
‚û§ Resizable array implementation of List.
‚û§ Stores elements in contiguous memory like arrays.
‚û§ Allows random access using index.
‚û§ Maintains insertion order, supports duplicates, and allows null values.

‚úÖ Features:
‚û§ Dynamic resizing (internally uses arrays)
‚û§ Fast access (O(1) for get)
‚û§ Slower insertions/deletions in middle (O(n))

üîç Example Use:
ArrayList<String> countries = new ArrayList<>();
countries.add("India");
countries.add("USA");
countries.add("Germany");
countries.add("India"); // allows duplicates

System.out.println(countries.get(0));     // India
countries.set(1, "UK");                   // replaces "USA" with "UK"
countries.remove("India");               // removes 1st occurrence
System.out.println(countries);

üÜï Java 21+ Example: SequencedCollection Methods
System.out.println(countries.getFirst());     // First element
System.out.println(countries.getLast());      // Last element
System.out.println(countries.reversed());     // Reversed view (immutable)
countries.removeFirst();                      // Removes first
countries.removeLast();                       // Removes last

üîí Immutable ArrayList in Java
1. How List.of() Works
‚û§ Introduced in Java 9.
‚û§ Creates an immutable (read-only) list.
‚û§ Any attempt to:
1. Add
2. Remove
3. Replace an element
will throw java.lang.UnsupportedOperationException.

2. Example from Your Code
List<Long> newArr = List.of(34554L, 443453L, 3434L); // Immutable list
ArrayListIntro a1 = new ArrayListIntro();
a1.addMoney(newArr);

3. Why the Error Happens
In your addMoney() method:
x.add(2345676543L); 
‚û§ This fails because List.of() returns an immutable list.
‚û§ You can read from it but cannot modify it.

Error: java.lang.UnsupportedOperationException

4. Why Use Immutable Lists?
‚úÖ Thread-safety (no risk of accidental modifications).
‚úÖ Easy to share between methods.
‚úÖ Good for constants or fixed configurations.
