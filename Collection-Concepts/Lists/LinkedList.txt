üìú LinkedList in Java

1. Key Characteristics
‚û§ Order Preserved ‚Üí Elements are stored in the same order they are inserted.
‚û§ Allows Duplicates ‚Üí No restriction on duplicate values.
‚û§ Non-contiguous Memory ‚Üí Unlike ArrayList, which uses a dynamic array, ‚û§ LinkedList nodes are scattered in memory.
‚û§ Underlying Data Structure ‚Üí Doubly Linked List (each node has pointers to the previous and next node).

2. Example Code
package p1;

import java.util.LinkedList;

public class LinkedListIntro {

    public static void main(String[] args) {
        LinkedList<String> str = new LinkedList<>();

        // Adding elements
        str.add("Apple");
        str.add("Banana");
        str.add("Mango");

        // Printing using enhanced for loop
        for (String s : str) {
            System.out.println(s);
        }

        System.out.println("");

        // Access first and last elements
        System.out.println(str.getFirst()); // Apple
        System.out.println(str.getLast());  // Mango

        System.out.println("");

        // Remove element
        str.remove("Mango");

        // Reverse the list (Java 21+ feature from SequencedCollection)
        System.out.println(str.reversed());

        // Get element at index
        System.out.println(str.get(1)); // Banana

        // This will throw IndexOutOfBoundsException
        // System.out.println(str.get(2));
    }
}

3. Important Notes

Java 21 Addition:
LinkedList now implements SequencedCollection

‚Üí New methods like:
getFirst(), getLast()
removeFirst(), removeLast()
reversed()

Performance:
1. O(1) for adding/removing at start or end.
2. O(n) for accessing by index (no random access like ArrayList).

When to Use LinkedList
‚úÖ Frequent insertions/deletions in the middle or ends.
‚ùå Not great for random access (use ArrayList instead).

