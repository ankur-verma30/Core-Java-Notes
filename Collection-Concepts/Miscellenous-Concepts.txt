ðŸ§  Method Referencing in Java
ðŸ”¹ What is Method Referencing
âž¤ A shorthand syntax of lambda expressions when the lambda body only calls an existing method.
âž¤ Improves readability and makes code look cleaner.
âž¤ Introduced in Java 8 with functional programming features.

ðŸ”¹ Syntax
ClassName::methodName
object::methodName
ClassName::new  (for constructors)

ðŸ”¹ Types of Method References
âœ…Type 1: Reference to a static method

list.forEach(System.out::println);  
// equivalent to: list.forEach(x -> System.out.println(x));

âœ…Type 2: Reference to an instance method of a particular object
String str = "hello";
Supplier<Integer> s = str::length;
System.out.println(s.get());  // 5

âœ…Type 3: Reference to an instance method of an arbitrary object of a particular type
List<String> names = Arrays.asList("Ankur", "Ravi", "Megha");
names.sort(String::compareToIgnoreCase);
// equivalent to (a, b) -> a.compareToIgnoreCase(b)

âœ…Type 4: Reference to a constructor
Supplier<Student> s = Student::new;
Student st = s.get();

ðŸ”¹ Why Method Reference?
âž¤ Makes lambda shorter and cleaner.
âž¤ Avoids boilerplate (param) -> obj.method(param).
âž¤ mproves readability in sorting, filtering, mapping, etc.

ðŸ”¹ Example: Sorting with Method Reference
students.sort(Comparator.comparingInt(Student::getAge));

Equivalent lambda:
students.sort((s1, s2) -> Integer.compare(s1.getAge(), s2.getAge()));

âš¡ Tips
âž¤ Method reference is just syntactic sugar for lambdas.
âž¤ Works only when the method signature matches the functional interface method.
âž¤ Commonly used in Streams API (map, filter, forEach) and Comparator.

âœ… Example Code Snippet
package collections;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Student {
	String name;
	double gpa;

	Student(String name, double gpa) {
		this.name = name;
		this.gpa = gpa;
	}

	String getName() {
		return this.name;
	}

	double getGpa() {
		return this.gpa;
	}

} 
public class ArrayListIntro {

	public static void main(String[] args) {
		List<Student> students = new ArrayList<>();
		students.add(new Student("Charlie", 3.5));
		students.add(new Student("Bob", 3.7));
		students.add(new Student("Alice", 3.5));
		students.add(new Student("Ankur", 3.9));

		Comparator<Student> comparator = Comparator.comparing(Student::getGpa).reversed()
				.thenComparing(Student::getName);

		students.sort(comparator);
		for (Student s : students) {
			System.out.println(s.getName() + " " + s.getGpa());
		}

	}
}
